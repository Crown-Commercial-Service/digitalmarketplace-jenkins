---
- set_fact:  # The authorized_key module does accept URLs, but only one at a time when passed a multiline set of
             # keys, so we have to do the lookup ourselves and build a list of all the keys we want.
    ssh_keys: "{{ ssh_keys|default([jenkins_2_public_key])
      + query('url', 'https://github.com/' ~ item.name ~ '.keys', split_lines=True) }}"
  with_items:
    - "{{ jenkins_github_users }}"
  tags: keys

- name: Add developers' public ssh keys to authorized_keys file
  authorized_key:
    key: "{{ ssh_keys|join('\n') }}"
    user: ubuntu
    exclusive: yes
  tags: keys

- name: Setup Jenkins SSH directory
  file: path=/var/lib/jenkins/.ssh state=directory owner=jenkins group=jenkins

- name: Setup Jenkins SSH config
  copy: src=jenkins_ssh_config dest=/var/lib/jenkins/.ssh/config owner=jenkins mode=600

- name: Decrypt Github key for jenkins user
  become: no
  local_action: >
    shell {{ dm_credentials_repo }}/sops-wrapper -d {{ dm_credentials_repo }}/github/github_com_and_enterprise.enc >
    {{ dm_credentials_repo }}/github/github_com_and_enterprise &&
    chmod 600 {{ dm_credentials_repo }}/github/github_com_and_enterprise

- name: Copy Github keys for jenkins user
  copy: src={{ item.from }} dest=/var/lib/jenkins/.ssh/{{ item.to }} mode=600 owner=jenkins
  with_items:
    - { from: "{{ dm_credentials_repo }}/github/github_com_and_enterprise", to: "github_com_and_enterprise" }

- name: Remove decrypted Github key for jenkins user
  become: no
  local_action: "shell rm {{ dm_credentials_repo }}/github/github_com_and_enterprise"

