---
- include: volume.yml tags=volume
- include: vpn.yml tags=vpn

- name: Add Jenkins apt repository key.
  apt_key:
    url: "{{ jenkins_repo_key_url }}"
    state: present

- name: Add Jenkins apt repository.
  apt_repository:
    repo: "{{ jenkins_repo_url }}"
    state: present
    update_cache: yes

- name: Ensure Jenkins is installed.
  apt: pkg=jenkins state=installed

- name: Set Jenkins service boot config
  template: src=jenkins_defaults.j2
            dest=/etc/default/jenkins
            backup=no
  notify: restart jenkins

- name: Copy Github private key for jenkins user
  copy: src={{ github_private_key_path }} dest=/data/jenkins/github-private-key.pem mode=600 owner=jenkins
  tags: config

- name: Copy internal Github CA certificate
  copy: src={{ github_ca_cert_path }} dest=/data/jenkins/github-gds-ca.pem mode=600 owner=jenkins
  tags: config

- name: Check if Github CA is already imported
  shell: keytool -list -keystore /etc/ssl/certs/java/cacerts -storepass {{ java_certificate_store_pass }} -noprompt -alias github_gds_ca
  ignore_errors: true
  register: java_cert_imported
  tags: config

- name: Add internal Github CA certificate
  shell: keytool -import -trustcacerts -keystore /etc/ssl/certs/java/cacerts -alias github_gds_ca -storepass {{ java_certificate_store_pass }} -noprompt -file /data/jenkins/github-gds-ca.pem
  when: java_cert_imported|failed
  tags: config

- name: Copy Jenkins config files
  template: src=jenkins/{{ item }}.j2
        dest=/data/jenkins/{{ item }}
        backup=no
  notify: restart jenkins
  with_items:
    - config.xml
    - credentials.xml
    - hudson.plugins.git.GitSCM.xml
  tags: config

- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes

- name: Instal curl
  apt: pkg=curl state=installed

- name: Wait for Jenkins to start up before proceeding.
  shell: curl --head --silent http://{{ jenkins_hostname }}:8080/cli/
  register: result
  until: result.stdout.find("200 OK") != -1
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:8080/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10

- include: plugins.yml tags=plugins
- include: jobs.yml tags=jobs
- include: tools.yml tags=tools
- include: nginx.yml tags=nginx
