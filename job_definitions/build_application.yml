- job:
    name: build-app
    display-name: Build application
    project-type: pipeline
    description: Builds the application artefact and uploads it to S3
    disabled: false
    concurrent: true
    parameters:
      - choice:
          name: APPLICATION_NAME
          choices:
{% for application in dm_applications %}
            - {{ application }}
{% endfor %}
      - string:
          name: RELEASE_NAME
          description: "Application tag (eg 'release-42') to checkout for building the artefact"
    pipeline:
      script: |
        node {
            try {
                stage('Check previous builds') {
                  currentBuild.displayName = "#${BUILD_NUMBER} - ${APPLICATION_NAME} - ${RELEASE_NAME}"
                  existingRelease = sh(script: "curl -f https://index.docker.io/v1/repositories/digitalmarketplace/${APPLICATION_NAME}/tags/${RELEASE_NAME}", returnStatus: true)
                }

                if (existingRelease == 0) {
                  echo "Release ${RELEASE_NAME} already exists"
                  currentBuild.result = 'SUCCESS'
                  return
                }

                stage('Prepare') {
                    git url: "git@github.com:alphagov/digitalmarketplace-${APPLICATION_NAME}.git", branch: 'master', credentialsId: 'github_com_and_gds'
                    echo "Cleaning repository"
                    sh("git clean -fdx")
                    echo "Checking out ${RELEASE_NAME}"
                    sh("git reset --hard ${RELEASE_NAME}")
                }
                stage('Build') {
                    sh("docker build --pull -t digitalmarketplace/${APPLICATION_NAME} --build-arg release_name=${RELEASE_NAME} .")
                    sh("docker tag digitalmarketplace/${APPLICATION_NAME} digitalmarketplace/${APPLICATION_NAME}:${RELEASE_NAME}")
                }
                stage('Upload') {
                    docker_credentials = sh(script: '/var/lib/jenkins/digitalmarketplace-credentials/sops-wrapper -d /var/lib/jenkins/digitalmarketplace-credentials/jenkins-vars/docker_credentials_env.enc', returnStdout: true).trim()
                    withEnv(docker_credentials.tokenize("\n")) {
                        sh("docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}")
                    }

                    sh("docker push digitalmarketplace/${APPLICATION_NAME}:${RELEASE_NAME}")
                }
            } catch(err) {
                currentBuild.result = 'FAILURE'
                echo "Error: ${err}"
            } finally {
            }
        }
