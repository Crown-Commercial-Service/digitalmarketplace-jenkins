- job:
    name: build-app
    display-name: Build application
    project-type: pipeline
    description: Builds the application artefact and uploads it to S3
    disabled: false
    concurrent: false
    parameters:
      - choice:
          name: APPLICATION_NAME
          choices:
{% for application in dm_applications %}
            - {{ application }}
{% endfor %}
    pipeline:
      script: |
        node {
            try {
                stage('Prepare') {
                    git url: "git@github.com:alphagov/digitalmarketplace-${APPLICATION_NAME}.git", branch: 'master', credentialsId: 'github_com_and_gds'
                    echo "Cleaning repository"
                    sh("git clean -fdx")
                    sh("git reset --hard origin/master")
                }
                stage('Build') {
                    releaseNumber = sh(
                        script: "git log -1 --pretty=%B | grep 'Merge pull request' | cut -d ' ' -f 4 | tr -cd '[[:digit:]]'",
                        returnStdout: true
                    ).trim()
                    if (releaseNumber == "") {
                        throw new Exception('Release number can not be found')
                    }
                    echo "Release number: ${releaseNumber}"
                    currentBuild.displayName = "#${BUILD_NUMBER} - ${APPLICATION_NAME} - ${releaseNumber}"
                    sh("git archive --format=zip HEAD > release-${releaseNumber}.zip")
                    if (fileExists('scripts/build.sh')) {
                        echo "Running build script.."
                        def includeDirs = sh(
                            script: "./scripts/build.sh",
                            returnStdout: true
                        ).trim()
                        echo "Adding directories to the build artefact:\n${includeDirs}"
                        for (dir in includeDirs.tokenize("\n")) {
                            sh("zip -r release-${releaseNumber}.zip ${dir}")
                        }
                    }
                    def version_label = "release-${releaseNumber}"
                    echo "Version label: ${version_label}"
                    sh("echo '${version_label}' > version_label")
                    sh("zip release-${releaseNumber}.zip version_label")
                    sh("git rev-parse HEAD > version_sha")
                    sh("zip release-${releaseNumber}.zip version_sha")
                }
                stage('Upload') {
                    sh("aws s3 cp --only-show-errors release-${releaseNumber}.zip s3://digitalmarketplace-deployment/${APPLICATION_NAME}/release-${releaseNumber}.zip")
                }
            } catch(err) {
                currentBuild.result = 'FAILURE'
                echo "Error: ${err}"
            } finally {
            }
        }
