- job:
    name: docker-base-images
    display-name: Refresh Docker base images
    description: |
      Build Docker base images from digitalmarketplace-docker-base,
      push to the digitalmarketplace DockerHub organisation,
      and scan using the Snyk CLI.
    parameters:
      - string:
          name: HEAD_BRANCH
          default: "main"
          description: "*USE WITH CARE* - production releases should *ALWAYS* be from main"
      - bool:
          name: MARK_LATEST
          default: true
          description: "Whether to mark the built image as the 'latest'"
      - bool:
          name: SCAN
          default: true
          description: "Whether to perform snyk scan on generated image"
    project-type: pipeline
    triggers:
      - timed: "H 0 * * 1,4,6"
      - pollscm:
          cron: "H/5 * * * *"
    dsl: |
      node {
        try {
          stage('Prepare') {
            currentBuild.displayName = "#${BUILD_NUMBER} - ${HEAD_BRANCH}"
            git url: "git@github.com:alphagov/digitalmarketplace-docker-base.git", branch: HEAD_BRANCH, credentialsId: 'github_com_and_enterprise', poll: true
          }
          stage('Build') {
            sh("make build")
          }
          stage('Push') {
            docker_credentials = sh(script: 'sops -d /home/jenkins/digitalmarketplace-credentials/jenkins-vars/docker_credentials_env.enc', returnStdout: true).trim()
            withEnv(docker_credentials.tokenize("\n")) {
              sh("set +x; docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}")
            }

            if (HEAD_BRANCH != "main" && sh(script: "cat VERSION", returnStdout: true) ==~ /\d.*/) {
              input("WARNING: VERSION looks numeric - it is probably a bad idea to create a release- tagged image from a non-main HEAD_BRANCH!")
            }
            if (MARK_LATEST.toString() == "true" && HEAD_BRANCH != "main") {
              input("WARNING: It is probably a bad idea to mark a non-main HEAD_BRANCH image as 'latest'")
            }

            withEnv(MARK_LATEST.toString() == "true" ? [] : ["NOT_LATEST=1"]) {
              sh("make push")
            }
          }
          stage ('Scan') {
            if (SCAN.toString() == "true") {
              sh 'rm -rf reports && mkdir reports'
              ansiColor('xterm') {
                sh 'make scan DM_CREDENTIALS_REPO="/home/jenkins/digitalmarketplace-credentials" REPORTS="reports"'
              }
              publishHTML reportName: "Snyk reports", reportDir: "reports", reportFiles: "**/snyk_report.html"
            } else {
              echo "Skipping Snyk scan"
            }
          }

          build job: "notify-slack",
            parameters: [
              string(name: 'USERNAME', value: 'build-and-push-base-images'),
              string(name: 'ICON', value: ':happy-docker:'),
              string(name: 'JOB', value: "Build and push docker base images"),
              string(name: 'CHANNEL', value: "#dm-release"),
              text(name: 'STATUS', value: "SUCCESS"),
              text(name: 'URL', value: "<${BUILD_URL}consoleFull|${BUILD_DISPLAY_NAME}>")
            ]
        }
        catch (err)
        {
          currentBuild.result = 'FAILURE'
          echo "Error: ${err}"
          build job: "notify-slack",
            parameters: [
              string(name: 'USERNAME', value: 'build-and-push-base-images'),
              string(name: 'ICON', value: ':sad-docker:'),
              string(name: 'JOB', value: "Build and push docker base images"),
              string(name: 'CHANNEL', value: "#dm-release"),
              text(name: 'STATUS', value: "FAILED"),
              text(name: 'URL', value: "<${BUILD_URL}consoleFull|${BUILD_DISPLAY_NAME}>")
            ]
        }
      }
