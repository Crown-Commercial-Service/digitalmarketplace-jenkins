- job:
    name: database-migration-paas
    display-name: Run database migration on PaaS
    project-type: pipeline
    description: Runs the database migration script on a newly deployed PaaS application
    concurrent: true
    parameters:
      - choice:
          name: STAGE
          choices:
            - Select one
            - preview
            - staging
            - production
      - choice:
          name: APPLICATION_NAME
          choices:
            - api
      - string:
          name: RELEASE_NAME
          description: "Release name (eg 'release-42') to run migrations from"
    dsl: |
      def notify_slack(icon, status) {
        build job: "notify-slack",
              parameters: [
                string(name: 'USERNAME', value: "database-migration-paas"),
                string(name: 'ICON', value: icon),
                string(name: 'JOB', value: "Run database migrations for ${APPLICATION_NAME} on ${STAGE}"),
                string(name: 'CHANNEL', value: "#dm-2ndline"),
                string(name: 'PROJECT', value: "${APPLICATION_NAME}"),
                text(name: 'STAGE', value: "${STAGE}"),
                text(name: 'RELEASE_NAME', value: "<https://github.com/alphagov/digitalmarketplace-${APPLICATION_NAME}/tree/${RELEASE_NAME}|${RELEASE_NAME}>"),
                text(name: 'STATUS', value: status),
                text(name: 'URL', value: "<${BUILD_URL}consoleFull|${BUILD_DISPLAY_NAME}>")
              ]
      }

      node {

          try {
              git url: 'git@github.com:alphagov/digitalmarketplace-aws.git', branch: 'main', credentialsId: 'github_com_and_enterprise'

              stage('Prepare') {
                  build job: "update-credentials"
                  currentBuild.displayName = "#${BUILD_NUMBER} - ${STAGE} - ${APPLICATION_NAME} - #${RELEASE_NAME}"
                  sh('make paas-clean')
                  sh('make requirements')
              }

              stage('Run database migration') {
                withEnv(["DM_CREDENTIALS_REPO=/home/jenkins/digitalmarketplace-credentials", "CF_HOME=${pwd()}"]) {
                  paas_credentials = sh(script: 'sops -d $DM_CREDENTIALS_REPO/jenkins-vars/paas_credentials_env.enc', returnStdout: true).trim()
                  withEnv(paas_credentials.tokenize("\n")) {
                      sh('make paas-login')
                  }
                  lock("paas-${STAGE}-${APPLICATION_NAME}-deploy") {
                      sh "make deploy-db-migration"
                      timeout(2) {
                          waitUntil {
                              sleep 5
                              def taskStatus = sh(
                                  script: 'make check-db-migration-task',
                                  returnStdout: true
                              ).trim()
                              echo "Task status is ${taskStatus}"
                              if (taskStatus == 'FAILED') {
                                  sh("cf logs --recent ${APPLICATION_NAME}-db-migration")
                                  throw new Exception('Database migration task failed')
                              } else if (taskStatus == 'SUCCEEDED') {
                                  notify_slack(':duck:', 'SUCCESS')
                              }
                              return (taskStatus == 'SUCCEEDED');
                          }
                      }
                  }
                }
              }
          } catch(err) {
              currentBuild.result = 'FAILURE'
              echo "Error: ${err}"
              notify_slack(':kaboom:', 'FAILED')
          } finally {
              sh('make paas-clean')
          }
      }
