{% set environments = ['production'] %}
{% set frameworks = [('DOS3', 'digital-outcomes-and-specialists-3'), ('G10', 'g-cloud-10')] %}
---
{% for environment in environments %}
{% for acronym, framework in frameworks %}
- job:
    name: 'generate-upload-and-notify-counterpart-signature-pages-{{ environment }}-{{ acronym }}'
    display-name: 'Generate, Upload and Notify Counterpart Signature Pages - {{ environment }}-{{ acronym }}'
    project-type: pipeline
    description: |
        This job will run a series of scripts to
        <ol>
          <li>Generate framework agreement counterpart signature pages for suppliers approved for countersignature but
              without a countersigned agreement</li>
          <li>Upload the generated files to S3 and set the path in the relevant FrameworkAgreement record</li>
          <li>Send an email to all active users on the supplier account that the counterpart file has been uploaded</li>
        </ol>
    concurrent: false
    triggers:
      - timed: 'H 1 * * *'
    properties:
      build-discarder:
        days-to-keep: 7
        artifact-days-to-keep: 7
    pipeline:
      script: |
        node {
            try {
              stage('Prepare') {
                dir('scripts/generated-countersignature-pdfs') {
                  deleteDir()
                }
                dir('scripts') {
                  git url: "git@github.com:alphagov/digitalmarketplace-scripts.git", branch: 'master', credentialsId: 'github_com_and_enterprise', poll: true
                  echo "Cleaning scripts repository"
                  sh('pwd')
                  sh("git clean -fdx")
                  sh("git reset --hard origin/master")
                }
                dir('agreements') {
                  git url: "git@github.com:alphagov/digitalmarketplace-agreements.git", branch: 'master', credentialsId: 'github_com_and_enterprise', poll: true
                  echo "Cleaning agreements repository"
                  sh('pwd')
                  sh("git clean -fdx")
                  sh("git reset --hard origin/master")
                }
              }
              stage('Generate') {
                dir('scripts') {
                  sh('pyenv local 3.6.2')
                  sh('[ -d venv ] || virtualenv venv')
                  sh('source ./venv/bin/activate')
                  sh('pip install --upgrade pip')
                  sh('pip install -r requirements.txt')
                  sh('xvfb-run --server-args="-screen 0, 1024x768x24" \
                        python ./scripts/generate-framework-agreement-counterpart-signature-pages.py \
                               {{ environment }} \
                               {{ framework }} \
                               ../agreements \
                               generated-countersignature-pdfs')
                }
              }
              stage('Upload') {
                dir('scripts') {
                  sh('pyenv local 3.6.2')
                  sh('[ -d venv ] || virtualenv venv')
                  sh('source ./venv/bin/activate')
                  sh('pip install --upgrade pip')
                  sh('pip install -r requirements.txt')
                  sh('python ./scripts/upload-counterpart-agreements.py \
                  {{ environment }} \
                  generated-countersignature-pdfs \
                  {{ framework }} \
                  --notify-key="$NOTIFY_API_TOKEN" \
                  --notify-template-id=cdd836a0-02e2-4c8d-98a6-2544d63f5ea9 \
                  ')
                }
              }
              stage('Cleanup') {
                dir('scripts/generated-countersignature-pdfs') {
                  deleteDir()
                }
              }
            } catch(err) {
              currentBuild.result = 'FAILURE'
              echo "Error: ${err}"
              build job: 'notify-slack', parameters: [
                string(name: 'USERNAME', value: 'jenkins'),
                string(name: 'JOB', value: 'Generate {{ framework }} counterpart signature pages'),
                string(name: 'ICON', value: ':alarm_clock:'),
                string(name: 'STAGE', value: '{{ environment }}'),
                string(name: 'STATUS', value: 'FAILED'),
                string(name: 'CHANNEL', value: '#dm-release')
              ]
            }
        }

{% endfor %}
{% endfor %}
