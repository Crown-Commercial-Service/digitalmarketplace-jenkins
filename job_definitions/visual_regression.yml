---
{% for environment in ("preview", "staging") %}
- job:
    name: "visual-regression-{{ environment }}"
    display-name: "Visual regression - {{ environment }}"
    project-type: freestyle
    description: "Run visual regression tests against {{ environment }}"
    properties:
      - build-discarder:
          days-to-keep: 14
          num-to-keep: 50
    parameters:
      - choice:
          name: COMMAND
          description: "Run the visual regression tests against {{ environment }}, or approve the last test run and make them the new reference images for the Digital Marketplace."
          choices:
            - test
            - approve
    scm:
      - git:
          url: git@github.com:alphagov/digitalmarketplace-visual-regression.git
          credentials-id: github_com_and_enterprise
          branches:
            - "main"
          wipe-workspace: false
    triggers:
      - pollscm:
          cron: "H/2 * * * *"
    wrappers:
      - ansicolor
    publishers:
      - html-publisher:
          name: "Visual Regression Test Report"
          dir: backstop_data
          files: html_report/index.html
          keep-all: true
          allow-missing: false
          link-to-last-build: true
      - trigger-parameterized-builds:
          - project: notify-slack
            condition: UNSTABLE_OR_WORSE
            predefined-parameters: |
              USERNAME=visual-regression
              JOB=Visual regression tests
              ICON=:sleuth_or_spy:
              STAGE={{ environment }}
              STATUS=FAILED
              URL=<${BUILD_URL}Visual_Regression_Test_Report|${BUILD_DISPLAY_NAME}>
              CHANNEL=#dm-release
    builders:
      - conditional-step:
          condition-kind: strings-match
          condition-string1: ${ENV, var="COMMAND"}
          condition-string2: test
          condition-case-insensitive: true
          steps:
            - shell: |
                rm -rf backstop_data/html_report
                rm -rf backstop_data/bitmaps_test/*

      - shell: |

          export DM_ENVIRONMENT="{{ environment }}"

          set +x # do not echo credentials - remove for debugging

          export DM_FRONTEND_DOMAIN="{{ app_urls[environment].www }}"
          export DM_ADMIN_FRONTEND_DOMAIN="{{ app_urls[environment].admin_www }}"

          export DM_SUPPLIER_USER_EMAIL="{{ smoke_test_variables[environment].supplier_email }}"
          export DM_SUPPLIER_USER_PASSWORD="{{ smoke_test_variables[environment].supplier_password }}"

          export DM_ADMIN_USER_EMAIL="{{ smoke_test_variables[environment].admin_email }}"
          export DM_ADMIN_USER_PASSWORD="{{ smoke_test_variables[environment].admin_password }}"

          export DM_ADMIN_CCS_CATEGORY_USER_EMAIL="{{ smoke_test_variables[environment].admin_ccs_category_email }}"
          export DM_ADMIN_CCS_CATEGORY_USER_PASSWORD="{{ smoke_test_variables[environment].admin_ccs_category_password }}"

          export DM_ADMIN_CCS_SOURCING_USER_EMAIL="{{ smoke_test_variables[environment].admin_ccs_sourcing_email }}"
          export DM_ADMIN_CCS_SOURCING_USER_PASSWORD="{{ smoke_test_variables[environment].admin_ccs_sourcing_password }}"

          export DM_ADMIN_CCS_DATA_CONTROLLER_USER_EMAIL="{{ smoke_test_variables[environment].admin_ccs_data_controller_email }}"
          export DM_ADMIN_CCS_DATA_CONTROLLER_USER_PASSWORD="{{ smoke_test_variables[environment].admin_ccs_data_controller_password }}"

          export DM_ADMIN_MANAGER_USER_EMAIL="{{ smoke_test_variables[environment].admin_manager_email }}"
          export DM_ADMIN_MANAGER_USER_PASSWORD="{{ smoke_test_variables[environment].admin_manager_password }}"

          export DM_ADMIN_FRAMEWORK_MANAGER_USER_EMAIL="{{ smoke_test_variables[environment].admin_framework_manager_email }}"
          export DM_ADMIN_FRAMEWORK_MANAGER_USER_PASSWORD="{{ smoke_test_variables[environment].admin_framework_manager_password }}"

          export DM_BUYER_USER_EMAIL="{{ smoke_test_variables[environment].buyer_email }}"
          export DM_BUYER_USER_PASSWORD="{{ smoke_test_variables[environment].buyer_password }}"

          set -x # restore echo

          curl ${DM_FRONTEND_DOMAIN}/_status
          curl ${DM_FRONTEND_DOMAIN}/buyers/_status
          curl ${DM_FRONTEND_DOMAIN}/suppliers/_status
          curl ${DM_FRONTEND_DOMAIN}/suppliers/opportunities/_status
          curl ${DM_ADMIN_FRONTEND_DOMAIN}/admin/_status
          curl ${DM_FRONTEND_DOMAIN}/user/_status

          BACKSTOP_VERSION="$(jq -r '.dependencies.backstopjs.version' package-lock.json)"
          DOCKER_UID="$(id -u)"
          DOCKER_GID="$(getent group docker | awk -F ':' '{print $3}')"

          docker pull backstopjs/backstopjs:$BACKSTOP_VERSION

          docker run --rm -v $(pwd):/src -u $DOCKER_UID:$DOCKER_GID \
            -e DM_ENVIRONMENT -e DM_FRONTEND_DOMAIN -e DM_ADMIN_FRONTEND_DOMAIN \
            -e DM_SUPPLIER_USER_EMAIL -e DM_SUPPLIER_USER_PASSWORD \
            -e DM_BUYER_USER_EMAIL -e DM_BUYER_USER_PASSWORD \
            -e DM_ADMIN_USER_EMAIL -e DM_ADMIN_USER_PASSWORD \
            -e DM_ADMIN_CCS_CATEGORY_USER_EMAIL -e DM_ADMIN_CCS_CATEGORY_USER_PASSWORD \
            -e DM_ADMIN_CCS_SOURCING_USER_EMAIL -e DM_ADMIN_CCS_SOURCING_USER_PASSWORD \
            -e DM_ADMIN_CCS_DATA_CONTROLLER_USER_EMAIL -e DM_ADMIN_CCS_DATA_CONTROLLER_USER_PASSWORD \
            -e DM_ADMIN_MANAGER_USER_EMAIL -e DM_ADMIN_MANAGER_USER_PASSWORD \
            -e DM_ADMIN_FRAMEWORK_MANAGER_USER_EMAIL -e DM_ADMIN_FRAMEWORK_MANAGER_USER_PASSWORD \
            backstopjs/backstopjs:$BACKSTOP_VERSION $COMMAND --configPath=config.js

      - conditional-step:
          condition-kind: and
          condition-operands:
            - condition-kind: current-status
              condition-worst: SUCCESS
              condition-best: SUCCESS
            - condition-kind: strings-match
              condition-string1: ${ENV, var="COMMAND"}
              condition-string2: test
              condition-case-insensitive: true
          steps:
            - trigger-builds:
              - project: notify-slack
                predefined-parameters: |
                  USERNAME=visual-regression
                  JOB=Visual regression tests
                  ICON=:green_tick:
                  STAGE={{ environment }}
                  STATUS=SUCCESS
                  URL=<${BUILD_URL}Visual_Regression_Test_Report|${BUILD_DISPLAY_NAME}>
                  CHANNEL=#dm-release

      - conditional-step:
          condition-kind: and
          condition-operands:
            - condition-kind: current-status
              condition-worst: SUCCESS
              condition-best: SUCCESS
            - condition-kind: strings-match
              condition-string1: ${ENV, var="COMMAND"}
              condition-string2: approve
              condition-case-insensitive: true
          steps:
            - trigger-builds:
              - project: notify-slack
                predefined-parameters: |
                  USERNAME=visual-regression
                  JOB=Visual regression tests
                  ICON=:verified:
                  STAGE={{ environment }}
                  STATUS=APPROVED
                  URL=<${BUILD_URL}Visual_Regression_Test_Report|${BUILD_DISPLAY_NAME}>
                  CHANNEL=#dm-release
{% endfor %}
