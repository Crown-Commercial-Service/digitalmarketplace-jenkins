- job:
    name: clean-and-migrate-db-dump
    display-name: Clean and migrate database dump
    project-type: pipeline
    description: Takes the latest production database dump, cleans it, and migrates to target stage. Also Google Drive.
    concurrent: false
    parameters:
      - extended-choice:
          name: TARGET_STAGE
          type: radio
          default-value: staging
          value: google-drive,preview,staging
    pipeline:
      script: |
        node {
          currentBuild.displayName = "#${BUILD_NUMBER} - ${TARGET_STAGE}"

          withEnv([
            "DM_CREDENTIALS_REPO=/var/lib/jenkins/digitalmarketplace-credentials",
            "CF_HOME=${pwd()}",
            "STAGE=db-cleanup"
          ]) {

            stage('Prepare') {
              git url: 'git@github.com:alphagov/digitalmarketplace-aws.git', branch: 'make-db-dumps-clean', credentialsId: 'github_com_and_enterprise'
              build job: "update-credentials"
              paas_credentials = sh(script: '$DM_CREDENTIALS_REPO/sops-wrapper -d $DM_CREDENTIALS_REPO/jenkins-vars/paas_credentials_env.enc', returnStdout: true).trim()
              withEnv(paas_credentials.tokenize("\n")) {
                sh('make paas-login')
                sh('cf target -s db-cleanup')
              }
            }

            stage('Create cleanup postgres service') {
              sh('make create-db-cleanup-service')
              timeout(60) {
                waitUntil {
                  sleep 5
                  def taskStatus = sh(
                    script: 'make check-db-cleanup-service',
                    returnStdout: true
                  ).trim()
                  echo "Task status is ${taskStatus}"
                  if (taskStatus == 'CREATE FAILED' || taskStatus == 'DELETE IN PROGRESS') {
                      sh("cf logs --recent db-backup")
                      throw new Exception('Create cleanup service failed')
                  }
                  return (taskStatus == 'CREATE SUCCEEDED');
                }
              }
            }

            stage('Deploy db-cleanup app') {
              sh('make deploy-db-cleanup-app')
            }

            stage('Import and clean lastest production db-dump') {
              sh('''
                make requirements
                make import-and-clean-db-dump
              ''')
            }

            stage('Migrate data to target stage and google drive') {
              sh('GDRIVE_EXPORTDATA_FOLDER_ID="{{ jenkins_gdrive_folder_id }}"  make migrate-cleaned-db-dump')
            }

            stage('Cleanup app and service') {
              sh('make cleanup-db-cleanup')
            }

            if ("${TARGET_STAGE}" == 'preview' || "${TARGET_STAGE}" == 'staging') {
              def index_name = "g-cloud-${new java.text.SimpleDateFormat('yyyy-MM-dd').format(new Date())}"
              stage('Index target stage'){
                build job: "index-services-${TARGET_STAGE}"
                  parameters: [
                    string(name: 'INDEX', value: index_name),
                  ]
              }
              stage('Update index alias'){
                build job: update_index_alias
                  parameters: [
                    string(name: 'ALIAS', value: 'g-cloud'),
                    string(name: 'TARGET', value: index_name),
                    string(name: 'STAGE', value: ${TARGET_STAGE}),
                    string(name: 'DELETE_OLD_INDEXES', value: 'yes')
                  ]
              }
            }
          }
        }
