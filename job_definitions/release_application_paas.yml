- job:
    name: release-app-paas
    display-name: Release application to PaaS
    project-type: pipeline
    description: Download application from S3 and deploy it to PaaS
    disabled: false
    concurrent: true
    parameters:
      - choice:
          name: STAGE
          choices:
            - Select one
            - preview
            - staging
            - production
      - choice:
          name: APPLICATION_NAME
          choices:
            - Select one
{% for application in dm_applications %}
            - {{ application }}
{% endfor %}
      - string:
          name: RELEASE_NAME
          description: "Release name (eg 'release-42') to deploy"
    pipeline:
      script: |
        node {
            try {
                git url: 'git@github.com:alphagov/digitalmarketplace-aws.git', branch: 'master', credentialsId: 'github_com_and_gds'

                stage('Prepare') {
                    build job: "update-credentials"
                    currentBuild.displayName = "#${BUILD_NUMBER} - ${STAGE} - ${APPLICATION_NAME} - #${RELEASE_NAME}"
                    sh('make paas-clean')
                    sh('make requirements')
                }

                stage('Download') {
                    sh('make download-deployment-zip')
                }
                stage('Deploy') {
                  withEnv(["DM_CREDENTIALS_REPO=/var/lib/jenkins/digitalmarketplace-credentials", "CF_HOME=${pwd()}"]) {
                    paas_credentials = sh(script: '$DM_CREDENTIALS_REPO/sops-wrapper -d $DM_CREDENTIALS_REPO/paas/credentials_env.enc', returnStdout: true).trim()
                    withEnv(paas_credentials.tokenize("\n")) {
                        sh('make paas-login')
                    }
                    lock("paas-${STAGE}-${APPLICATION_NAME}-deploy") {
                        sh('make ${STAGE} deploy-app')
                    }
                  }
                }
            } catch(err) {
                currentBuild.result = 'FAILURE'
                echo "Error: ${err}"
            } finally {
                sh('make paas-clean')
            }
        }
