---
{% for application in dm_applications %}
- job:
    name: release-{{ application }}
    display-name: "[Pipeline] {{ application }}"
    project-type: pipeline
    description: Promote {{ application }} through environments
    disabled: false
    concurrent: true
    triggers:
      - pollscm: "* * * * *"
    pipeline:
      script: |

        def tag_release(tag) {
          try {
            sh("git config user.name 'Jenkins'")
            sh("git config user.email '{{ jenkins_github_email }}'")
            sh("git tag -a ${tag} -m ${tag}")
            sh("git push origin ${tag} -f")
          } catch(e) {
            echo "${tag} tag already exists"
          }
        }

        def run_functional_tests(stage) {
          waitUntil {
            try {
              node {
                build job: "functional-tests-${stage}"
                return true
              }
            } catch(error) {
              echo "Functional tests failed: ${error}"
              timeout(time:1, unit:'DAYS') {
                script {
                  env.FAILED_TEST_ACTION = input message: 'Functional tests failed. Retry, skip or abort?',
                    parameters: [
                      [
                        $class: 'ChoiceParameterDefinition',
                        choices: 'Retry\nSkip',
                        description: 'Failed functional tests action',
                        name: 'action'
                      ]
                    ]
                }
                echo "Action chosen was ${env.FAILED_TEST_ACTION}"
              }
              if (env.FAILED_TEST_ACTION == 'Retry') {
                echo "Retrying functional tests on ${stage}."
                return false
              }
              if (env.FAILED_TEST_ACTION == 'Skip') {
                input(message: "Do you swear on your eternal soul that you 100% know what you're doing and you really don't want to make the tests pass first?")
                echo "Skipping failed functional tests on ${stage}."
                return true
              }
            }
          }
        }

        stage('Create release tag') {
          node {
            git url: "git@github.com:alphagov/digitalmarketplace-{{ application }}.git",
                branch: 'master', credentialsId: 'github_com_and_enterprise', poll: true
            releaseNumber = sh(
                script: "git log -1 --pretty=%B | grep 'Merge pull request' | cut -d ' ' -f 4 | tr -cd '[[:digit:]]'",
                returnStdout: true
            ).trim()

            if (releaseNumber == "") {
                throw new Exception('Release number can not be found')
            }

            releaseName = "release-${releaseNumber}"

            tag_release(releaseName)

            echo "Release number: ${releaseNumber}"
            currentBuild.displayName = "#${BUILD_NUMBER} - ${releaseName}"
          }
        }

        stage('Build') {
          node {
            build job: "build-app", parameters: [
              string(name: "APPLICATION_NAME", value: "{{ application }}"),
              string(name: "RELEASE_NAME", value: "${releaseName}"),
            ]
          }
        }

        {% if application in dm_db_applications %}
        stage('DB migration on preview') {
          node {
            build job: "database-migration-paas", parameters: [
              string(name: "STAGE", value: "preview"),
              string(name: "APPLICATION_NAME", value: "{{ application }}"),
              string(name: "RELEASE_NAME", value: "${releaseName}"),
            ]
          }
        }

        stage('Functional tests - preview') {
          milestone()
          run_functional_tests("preview")
          run_functional_tests("preview-legacy")
          milestone()
        }
        {% endif %}

        stage('Release to preview') {
          node {
            build job: "release-app-paas", parameters: [
              string(name: "STAGE", value: "preview"),
              string(name: "APPLICATION_NAME", value: "{{ application }}"),
              string(name: "RELEASE_NAME", value: "${releaseName}"),
            ]
            build job: "tag-application-deloyment", parameters: [
              string(name: "STAGE", value: "preview"),
              string(name: "APPLICATION_NAME", value: "{{ application }}"),
              string(name: "RELEASE_NAME", value: "${releaseName}"),
            ]
          }
        }

        stage('Functional tests - preview') {
          milestone()
          run_functional_tests("preview")
          run_functional_tests("preview-legacy")
          milestone()
        }

        {% if application in dm_db_applications %}
        stage('DB migration on staging') {
          milestone()
          input(message: "Run DB migration on staging?")
          milestone()
          node {
            build job: "database-migration-paas", parameters: [
              string(name: "STAGE", value: "staging"),
              string(name: "APPLICATION_NAME", value: "{{ application }}"),
              string(name: "RELEASE_NAME", value: "${releaseName}"),
            ]
          }
        }

        stage('Functional tests - staging') {
          milestone()
          run_functional_tests("staging")
          milestone()
        }
        {% endif %}

        stage('Release to staging') {
          milestone()
          input(message: "Release to staging?")
          milestone()
          node {
            build job: "release-app-paas", parameters: [
              string(name: "STAGE", value: "staging"),
              string(name: "APPLICATION_NAME", value: "{{ application }}"),
              string(name: "RELEASE_NAME", value: "${releaseName}"),
            ]
            build job: "tag-application-deloyment", parameters: [
              string(name: "STAGE", value: "staging"),
              string(name: "APPLICATION_NAME", value: "{{ application }}"),
              string(name: "RELEASE_NAME", value: "${releaseName}"),
            ]
          }
        }

        stage('Functional tests - staging') {
          milestone()
          run_functional_tests("staging")
          milestone()
        }

        {% if application in dm_db_applications %}
        stage('DB migration on production') {
          milestone()
          input(message: "Run DB migration on production?")
          milestone()
          node {
            build job: "database-migration-paas", parameters: [
              string(name: "STAGE", value: "production"),
              string(name: "APPLICATION_NAME", value: "{{ application }}"),
              string(name: "RELEASE_NAME", value: "${releaseName}"),
            ]
          }
        }
        {% endif %}

        stage('Release to production') {
          milestone()
          input(message: "Release to production?")
          milestone()
          node {
            build job: "release-app-paas", parameters: [
              string(name: "STAGE", value: "production"),
              string(name: "APPLICATION_NAME", value: "{{ application }}"),
              string(name: "RELEASE_NAME", value: "${releaseName}"),
            ]
            build job: "tag-application-deloyment", parameters: [
              string(name: "STAGE", value: "production"),
              string(name: "APPLICATION_NAME", value: "{{ application }}"),
              string(name: "RELEASE_NAME", value: "${releaseName}"),
            ]
          }
        }
{% endfor %}
