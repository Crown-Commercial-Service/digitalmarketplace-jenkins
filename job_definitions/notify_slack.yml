---
- job:
    name: "notify-slack"
    display-name: "Notify slack"
    project-type: freestyle
    description:
    properties:
      - build-discarder:
          days-to-keep: 4
          artifact-days-to-keep: 4
    parameters:
      - string:
          name: USERNAME
          default: deploy
      - string:
          name: ICON
          default: ":shipit:"
      - string:
          name: TEXT
      - string:
          name: CHANNEL
          default: "#dm-release"
      - string:
          name: PROJECT
      - text:
          name: STAGE
      - text:
          name: RELEASE_NAME
      - string:
          name: STATUS
      - string:
          name: URL
      - text:
          name: JOB
    builders:
      - shell: |
          #!/usr/bin/env python
          # encoding: utf-8

          import json
          import os
          import urllib2

          SLACK_URL = '{{ jenkins_slack_url }}'

          USERNAME = os.getenv('USERNAME', 'deploy')
          ICON = os.getenv('ICON', ':shipit:')
          CHANNEL = os.getenv('CHANNEL', '#dm-release')

          TEXT = os.getenv('TEXT', '')

          PROJECT = os.getenv('PROJECT', None)
          STAGE = os.getenv('STAGE', None)
          RELEASE_NAME = os.getenv('RELEASE_NAME', None)

          STATUS = os.getenv('STATUS', None)
          URL = os.getenv('URL', None)

          # STARTED_BY = os.getenv('STARTED_BY')
          JOB = os.getenv('JOB', None)


          def build_fields(fields):
              return [
                  {"title": key, "value": val, "short": short}
                  for key, val, short in fields
                  if val
              ]


          def color_from_status(status):
              if status == "SUCCESS":
                  return "good"
              elif status == "FAILED":
                  return "danger"
              elif status == "APPROVED":
                  return "#00ccff"


          def build_message():
              message = {
                  "username": USERNAME,
                  "icon_emoji": ICON,
                  "channel": CHANNEL,
              }

              if TEXT:
                  message.update({"text": TEXT})
                  return message

              fields_def = (
                  ("Project", PROJECT, False),
                  ("Stage", STAGE, True),
                  ("Release", RELEASE_NAME, True),
                  ("Status", STATUS, True),
                  ("Build URL", URL, True),
              )

              message.update({
                  "text": JOB,
                  "attachments": [{
                      "fallback": "\n".join("{}: {}".format(key, val) for key, val, short in fields_def),
                      "color": color_from_status(STATUS),
                      "fields": build_fields(fields_def),
                  }],
              })

              return message


          urllib2.urlopen(SLACK_URL, data=json.dumps(build_message()))
