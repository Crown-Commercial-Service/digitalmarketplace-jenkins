{% set environments = ['google-drive', 'preview', 'staging'] %}
---
{% for environment in environments %}
- job:
    name: "clean-and-apply-db-dump-{{ environment }}"
    display-name: "Clean and apply database dump - {{ environment }}"
    project-type: pipeline
    description: "Takes the latest production database dump, cleans it, and applies it to target stage. Also Google Drive."
    concurrent: false
{% if environment == 'staging' %}
    triggers:
      - timed: "0 4 * * 0"
{% endif %}
    dsl: |

      def notify_slack(icon, status) {
        build job: "notify-slack",
        parameters: [
          string(name: 'USERNAME', value: "clean-prod-db-dump-and-apply"),
          string(name: 'ICON', value: icon),
          string(name: 'JOB', value: "Clean and apply database dump to {{ environment }}"),
          string(name: 'CHANNEL', value: "#dm-release"),
          text(name: 'STAGE', value: "{{ environment }}"),
          text(name: 'STATUS', value: status),
          text(name: 'URL', value: "<${BUILD_URL}consoleFull|${BUILD_DISPLAY_NAME}>")
        ]
      }

      node {
        currentBuild.displayName = "#${BUILD_NUMBER} - {{ environment }}"

        withEnv([
          "DM_CREDENTIALS_REPO=/var/lib/jenkins/digitalmarketplace-credentials",
          "CF_HOME=${pwd()}",
          "PAAS_SPACE={{ environment }}"
        ]) {
          try {
            stage('Prepare') {
              git url: 'git@github.com:alphagov/digitalmarketplace-aws.git', branch: 'master', credentialsId: 'github_com_and_enterprise'
              build job: "update-credentials"

{% if environment in ['preview', 'staging'] %}
                paas_credentials = sh(script: '$DM_CREDENTIALS_REPO/sops-wrapper -d $DM_CREDENTIALS_REPO/jenkins-vars/paas_credentials_env.enc', returnStdout: true).trim()
                withEnv(paas_credentials.tokenize("\n")) {
                  sh('make paas-login')
                }

                env.TARGET_ALEMBIC_VERSION = sh(
                  script: "curl -s https://api.{{ environment }}.marketplace.team/_status | jq -r '.db_version'",
                  returnStdout: true
                )

                env.TARGET_RELEASE_VERSION = sh(
                  script: "curl -s https://api.{{ environment }}.marketplace.team/_status | jq -r '.version'",
                  returnStdout: true
                ).trim()
{% endif %}

              }

              stage('Run postgres container') {
                sh('make run-postgres-container')
              }

              stage('Import and clean lastest production db-dump') {
                sh(
                  script: '''
                    pyenv local 3.6.2
                    make requirements
                    make import-and-clean-db-dump
                  ''',
                  returnStdout: true
                )
                env.DUMP_ALEMBIC_VERSION = sh(
                  script: "psql -qtA -d postgres://postgres:@localhost:63306/postgres -c 'SELECT version_num FROM alembic_version ORDER BY version_num DESC LIMIT 1'",
                  returnStdout: true
                )
              }

              stage('Apply data to target stage and google drive') {
                sh(
                   script: '''
                     set +x
                     export GDRIVE_EXPORTDATA_FOLDER_ID="{{ jenkins_gdrive_db_dumps_folder_id }}"
                     set -x
                     export TARGET="{{ environment }}"
                     make apply-cleaned-db-dump
                   '''
                  )
              }

{% if environment in ['preview', 'staging'] %}
              stage('Check if migrations required and run'){
                if (env.DUMP_ALEMBIC_VERSION != env.TARGET_ALEMBIC_VERSION) {
                  build job: "database-migration-paas",
                  parameters: [
                    string(name: 'STAGE', value: "{{ environment }}"),
                    string(name: 'APPLICATION_NAME', value: 'api'),
                    string(name: 'RELEASE_NAME', value: "${env.TARGET_RELEASE_VERSION}")
                  ]
                }
              }

              withEnv(["INDEX_NAME={{ search_config['services'].default_index }}-${new java.text.SimpleDateFormat('yyyy-MM-dd').format(new Date())}"]){
                stage('Index target stage'){
                  build job: "create-index-{{ environment }}",
                  parameters: [
                    string(name: 'OBJECTS', value: "services"),
                    string(name: 'INDEX_NAME', value: "${INDEX_NAME}"),
                    string(name: 'FRAMEWORKS', value: "{{ search_config['services'].frameworks }}"),
                    string(name: 'MAPPING', value: "{{ search_config['services'].default_mapping_name }}"),
                  ]
                }
                stage('Update index alias'){
                  build job: "update-index-alias-{{ environment }}",
                  parameters: [
                    string(name: 'ALIAS', value: "{{ search_config['services'].default_index }}"),
                    string(name: 'TARGET', value: "${INDEX_NAME}"),
                    string(name: 'DELETE_OLD_INDEX', value: 'yes')
                  ]
                }
              }

              withEnv(["INDEX_NAME={{ search_config['briefs'].default_index }}-${new java.text.SimpleDateFormat('yyyy-MM-dd').format(new Date())}"]){
                stage('Index target stage'){
                  build job: "create-index-{{ environment }}",
                  parameters: [
                    string(name: 'OBJECTS', value: "briefs"),
                    string(name: 'INDEX_NAME', value: "${INDEX_NAME}"),
                    string(name: 'FRAMEWORKS', value: "{{ search_config['briefs'].frameworks }}"),
                    string(name: 'MAPPING', value: "{{ search_config['briefs'].default_mapping_name }}"),
                  ]
                }
                stage('Update index alias'){
                  build job: "update-index-alias-{{ environment }}",
                  parameters: [
                    string(name: 'ALIAS', value: "{{ search_config['briefs'].default_index }}"),
                    string(name: 'TARGET', value: "${INDEX_NAME}"),
                    string(name: 'DELETE_OLD_INDEX', value: 'yes')
                  ]
                }
              }
{% endif %}

              notify_slack(':shower:', 'SUCCESS')

            } catch(err) {
              notify_slack(':sadparrot:', 'FAILED')
              echo "Error caught"
              currentBuild.result = 'FAILURE'
              echo "Error: ${err}"
            } finally {
              stage('Cleanup') {
                sh('make cleanup-postgres-container')
                sh('make paas-clean')
              }
            }
          }
        }
{% endfor %}
