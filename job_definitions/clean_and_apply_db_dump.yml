{% set environments = ['google-drive', 'preview', 'staging'] %}
---
{% for environment in environments %}
- job:
    name: "clean-and-apply-db-dump-{{ environment }}"
    display-name: "Clean and apply database dump - {{ environment }}"
    project-type: pipeline
    description: "Takes the latest production database dump, cleans it, and applies it to target stage. Also Google Drive."
    concurrent: false
{% if environment == 'staging' %}
    triggers:
      - timed: "0 4 * * 0"
{% endif %}
    pipeline:
      script: |

        def notify_slack(icon, status) {
          build job: "notify-slack",
          parameters: [
            string(name: 'USERNAME', value: "clean-prod-db-dump-and-apply"),
            string(name: 'ICON', value: icon),
            string(name: 'JOB', value: "Clean and apply database dump to {{ environment }}"),
            string(name: 'CHANNEL', value: "#dm-release"),
            text(name: 'STAGE', value: "{{ environment }}"),
            text(name: 'STATUS', value: status),
            text(name: 'URL', value: "<${BUILD_URL}consoleFull|${BUILD_DISPLAY_NAME}>")
          ]
        }

        node {
          currentBuild.displayName = "#${BUILD_NUMBER} - {{ environment }}"

          withEnv([
            "DM_CREDENTIALS_REPO=/var/lib/jenkins/digitalmarketplace-credentials",
            "CF_HOME=${pwd()}",
            "PAAS_SPACE={{ environment }}"
          ]) {
            try {
              stage('Prepare') {
                git url: 'git@github.com:alphagov/digitalmarketplace-aws.git', branch: 'master', credentialsId: 'github_com_and_enterprise'
                build job: "update-credentials"
                paas_credentials = sh(script: '$DM_CREDENTIALS_REPO/sops-wrapper -d $DM_CREDENTIALS_REPO/jenkins-vars/paas_credentials_env.enc', returnStdout: true).trim()
                withEnv(paas_credentials.tokenize("\n")) {
                  sh('make paas-login')
                }
                env.TARGET_ALEMBIC_VERSION = sh(
                  script: "curl -s https://www.{{ environment }}.marketplace.team/_status | jq -r '.api_status.db_version'",
                  returnStdout: true
                )
              }

              stage('Run postgres container') {
                sh('make run-postgres-container')
              }

              stage('Import and clean lastest production db-dump') {
                sh('''
                  make requirements
                  make import-and-clean-db-dump
                ''')
                env.DUMP_ALEMBIC_VERSION = sh(
                  script: "psql -qtA -d postgres://postgres:@localhost:63306/postgres -c 'SELECT version_num FROM alembic_version ORDER BY version_num DESC LIMIT 1'",
                  returnStdout: true
                )
              }

              stage('Apply data to target stage and google drive') {
                sh('GDRIVE_EXPORTDATA_FOLDER_ID="{{ jenkins_gdrive_db_dumps_folder_id }}" make apply-cleaned-db-dump')
              }

{% if environment in ['preview', 'staging'] %}
              stage('Check if migrations required and run'){
                if (env.DUMP_ALEMBIC_VERSION != env.TARGET_ALEMBIC_VERSION) {
                  build job: "database-migration-paas",
                  parameters: [
                    string(name: 'STAGE', value: "{{ environment }}"),
                    string(name: 'APPLICATION_NAME', value: 'api'),
                    string(name: 'RELEASE_NAME', value: 'db-cleanup')
                  ]
                }
              }

              withEnv(["INDEX_NAME={{ search_config[environment].default_index }}-${new java.text.SimpleDateFormat('yyyy-MM-dd').format(new Date())}"]){
                stage('Index target stage'){
                  build job: "index-services-{{ environment }}",
                  parameters: [
                    string(name: 'INDEX', value: "${INDEX_NAME}"),
                  ]
                }
                stage('Update index alias'){
                  build job: "update-{{ environment }}-index-alias",
                  parameters: [
                    string(name: 'ALIAS', value: "{{ search_config[environment].default_index }}"),
                    string(name: 'TARGET', value: "${INDEX_NAME}"),
                    string(name: 'DELETE_OLD_INDEX', value: 'yes')
                  ]
                }
              }
{% endif %}

              notify_slack(':clean:', 'SUCCESS')

            } catch(err) {
              notify_slack(':sadparrot:', 'FAILED')
              echo "Error caught"
              currentBuild.result = 'FAILURE'
              echo "Error: ${err}"
            } finally {
              stage('Cleanup') {
                sh('make cleanup-postgres-container')
                sh('make paas-clean')
              }
            }
          }
        }
{% endfor %}
