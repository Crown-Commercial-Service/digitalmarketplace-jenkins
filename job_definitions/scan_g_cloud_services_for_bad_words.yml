{% set environments = ['preview', 'staging', 'production'] %}
---
{% for environment in environments %}
- job:
    name: "scan-g-cloud-services-for-bad-words-{{ environment }}"
    display-name: "Scan G-Cloud services for bad words - {{ environment }}"
    project-type: pipeline
    description: |
      Scans G-Cloud services for bad words contained in a list in our bad words repo.
      Select 'draft' Service Type to scan draft services. Only suppliers marked as 'onFramework' in the DB will have
      their services scanned, so make sure the 'mark-definite-framework-results' script has been run before scanning
      drafts.
    parameters:
      - string:
          name: FRAMEWORK
          description: "Slug of framework to scan for bad words"
      - choice:
          name: SERVICE_TYPE
          choices:
            - 'live'
            - 'draft'
    dsl: |
      def notify_slack(status) {
        build job: "notify-slack",
          parameters: [
            string(name: 'USERNAME', value: "scan-g-cloud-services-for-bad-words"),
            string(name: 'ICON', value: ":zipper_mouth_face:"),
            string(name: 'JOB', value: "Scan G-Cloud services for bad words - {{ environment }}"),
            string(name: 'CHANNEL', value: "#dm-release"),
            text(name: 'STAGE', value: "{{ environment }}"),
            text(name: 'STATUS', value: status),
            text(name: 'URL', value: "<${BUILD_URL}consoleFull|${BUILD_DISPLAY_NAME}>")
          ]
      }

      node {
        try {
          stage('Create data directory') {
           sh("rm -rf ./data && mkdir data")
          }
          stage('Clone frameworks') {
            dir('data/digitalmarketplace-frameworks') {
              git url: 'git@github.com:alphagov/digitalmarketplace-frameworks.git', branch: 'main'
            }
          }
          stage('Clone bad words') {
            dir('data/digitalmarketplace-bad-words') {
              git url: 'git@github.com:alphagov/digitalmarketplace-bad-words.git', branch: 'main', credentialsId: 'github_com_and_enterprise'
            }
          }
          stage('Run bad words script') {
            sh('''
              if [ "$SERVICE_TYPE" = "draft" ]; then
                FLAGS="--scan-drafts"
              fi

              docker run --rm \
                -e DM_DATA_API_TOKEN_{{ environment|upper }} \
                --volume \$(pwd)/data:/app/data digitalmarketplace/scripts \
                ./scripts/framework-applications/scan-g-cloud-services-for-bad-words.py \
                "{{ environment }}" \
                /app/data/digitalmarketplace-frameworks \
                /app/data/digitalmarketplace-bad-words/block-list.txt \
                $FRAMEWORK \
                /app/data \
                $FLAGS
            ''')
          }
          stage('Publish report') {
            publishHTML (target: [
              allowMissing: false,
              alwaysLinkToLastBuild: false,
              keepAll: true,
              reportDir: 'data',
              reportFiles: '**/${FRAMEWORK}-services-with-blacklisted-words.csv',
              reportName: 'bad-words-report'
            ])
          }

          notify_slack('SUCCESS')
        } catch (err) {
          currentBuild.result = 'FAILURE'
          echo "Error: ${err}"
          notify_slack('FAILED')
        }
      }
{% endfor %}

