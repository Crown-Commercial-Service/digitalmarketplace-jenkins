- job:
    name: database-backup
    display-name: Create offsite backup of database
    project-type: pipeline
    description: Takes a dump of the database, compresses it, encrypts it and uploads to S3.
    disabled: false
    concurrent: false
    triggers:
      - timed: "0 3 * * *"
    parameters:
      - extended-choice:
          name: STAGE
          type: radio
          default-value: production
          value: preview,staging,production
    pipeline:
      script: |

        def notify_slack(icon, status) {
          build job: "notify-slack",
                parameters: [
                  string(name: 'USERNAME', value: "database-backup"),
                  string(name: 'ICON', value: icon),
                  string(name: 'JOB', value: "Backup ${STAGE} database to S3"),
                  string(name: 'CHANNEL', value: "#dm-release"),
                  text(name: 'STAGE', value: "${STAGE}"),
                  text(name: 'STATUS', value: status),
                  text(name: 'URL', value: "<${BUILD_URL}consoleFull|${BUILD_DISPLAY_NAME}>")
                ]
        }

        node {
          currentBuild.displayName = "#${BUILD_NUMBER} - ${STAGE}"

          withEnv([
            "DM_CREDENTIALS_REPO=/var/lib/jenkins/digitalmarketplace-credentials",
            "CF_HOME=${pwd()}",
            "DUMP_FILE_NAME=${STAGE}-${new java.text.SimpleDateFormat('yyyyMMddHHmm').format(new Date())}.sql.gz.gpg"
          ]) {

            try {

              stage('Prepare') {
                echo "Getting ready to create ${DUMP_FILE_NAME}"
                git url: 'git@github.com:alphagov/digitalmarketplace-aws.git', branch: 'master', credentialsId: 'github_com_and_enterprise'
                build job: "update-credentials"
                paas_credentials = sh(script: '$DM_CREDENTIALS_REPO/sops-wrapper -d $DM_CREDENTIALS_REPO/jenkins-vars/paas_credentials_env.enc', returnStdout: true).trim()
                withEnv(paas_credentials.tokenize("\n")) {
                  sh('make paas-login')
                }
              }

              stage('Connect to service, create dump and upload to S3') {
                sh('''
                  pyenv local 3.6.2
                  make requirements
                  DUMP_FILE_NAME=${DUMP_FILE_NAME} make ${STAGE} deploy-db-backup-app
                ''')
                timeout(10) {
                  waitUntil {
                    sleep 5
                    def taskStatus = sh(
                        script: 'make check-db-backup-task',
                        returnStdout: true
                    ).trim()
                    echo "Task status is ${taskStatus}"
                    if (taskStatus == 'FAILED') {
                        sh("cf logs --recent db-backup")
                        throw new Exception('Create db dump task failed')
                    }
                    return (taskStatus == 'SUCCEEDED');
                  }
                }
              }

              stage('Check decryption') {
                sh('DUMP_FILE_NAME=${DUMP_FILE_NAME} ./scripts/check-db-dump-is-decryptable.sh')
              }

            } catch(err) {
                notify_slack(':-1:', 'FAILED')
                echo "Error caught"
                currentBuild.result = 'FAILURE'
                echo "Error: ${err}"
            } finally {
              stage('Cleanup') {
                sh('make cleanup-db-backup')
                sh('make paas-clean')
              }
            }
          }
        }
