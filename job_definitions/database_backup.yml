- job:
    name: database-backup
    display-name: Create offsite backup of database
    project-type: pipeline
    description: Takes a snapshot of the database, compresses it, encrypts it and uploads to S3.
    disabled: false
    concurrent: true
    pipeline:
      script: |
        node {
          withEnv(["DM_CREDENTIALS_REPO=/var/lib/jenkins/digitalmarketplace-credentials", "CF_HOME=${pwd()}", "STAGE=preview"]) {
            try {
              git url: 'git@github.com:alphagov/digitalmarketplace-aws.git', branch: 'db_backups_from_live_db', credentialsId: 'github_com_and_enterprise'

              stage('Prepare') {
                build job: "update-credentials"
              }

              stage('Login to Cloud Foundry') {
                paas_credentials = sh(script: '$DM_CREDENTIALS_REPO/sops-wrapper -d $DM_CREDENTIALS_REPO/jenkins-vars/paas_credentials_env.enc', returnStdout: true).trim()
                withEnv(paas_credentials.tokenize("\n")) {
                  sh('make paas-login')
                }
              }

              stage('Connect to service, create dump and upload to S3') {
                sh('''
                  [ -d venv ] || virtualenv venv
                  . ./venv/bin/activate
                  pip install -r requirements.txt
                  make preview deploy-db-snapshot
                ''')
                timeout(2) {
                  waitUntil {
                    sleep 5
                    def taskStatus = sh(
                        script: 'make check-db-snapshot-task',
                        returnStdout: true
                    ).trim()
                    echo "Task status is ${taskStatus}"
                    if (taskStatus == 'FAILED') {
                        sh("cf logs --recent db-snapshot")
                        throw new Exception('Create db dump task failed')
                    }
                    return (taskStatus == 'SUCCEEDED');
                  }
                }
              }
            } catch(err) {
                echo "Error caught"
                currentBuild.result = 'FAILURE'
                echo "Error: ${err}"
            } finally {
              stage('Cleanup') {
                sh('make cleanup-db-snapshot')
                sh('make paas-clean')
              }
            }
          }
        }
