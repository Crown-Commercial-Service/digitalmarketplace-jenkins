{% set environments = ['preview', 'staging', 'production'] %}
---
{% for environment in environments %}
- job:
    name: "apps-are-up-{{ environment }}"
    display-name: "Apps are up - {{ environment }}"
    project-type: pipeline
    description: |
      Check that the five Digital Marketplace apps are up and running in the {{ environment|upper }} environment:
      <ul>
        <li>API</li>
        <li>Search API</li>
        <li>Buyer frontend</li>
        <li>Supplier frontend</li>
        <li>Admin frontend</li>
      </ul>
    logrotate:
      daysToKeep: 4
      artifactDaysToKeep: 4
    triggers:
      - timed: "H/5 * * * *"
    wrappers:
      - ansicolor
    pipeline:
      script: |

        def notify_slack(icon, status) {
          build job: "notify-slack",
                parameters: [
                  string(name: 'USERNAME', value: 'smoke-tests'),
                  string(name: 'ICON', value: icon),
                  string(name: 'JOB', value: "Apps are up - {{ environment }}"),
                  string(name: 'CHANNEL', value: "#dm-release"),
                  text(name: 'STAGE', value: "{{ environment }}"),
                  text(name: 'STATUS', value: status),
                  text(name: 'URL', value: "<${BUILD_URL}smoke_test_report|${BUILD_DISPLAY_NAME}>")
                ]
        }

        node {
          git url: 'git@github.com:alphagov/digitalmarketplace-functional-tests.git', branch: 'master', credentialsId: 'github_com_and_enterprise'
          stage('Run smoke tests') {
            try {
              sh('''
                rbenv install -s
                gem install bundler --conservative

                export DM_API_DOMAIN="{{ app_urls[environment].data_api }}"
                export DM_API_ACCESS_TOKEN="$DM_DATA_API_TOKEN_{{ environment|upper }}"

                export DM_SEARCH_API_DOMAIN="{{ app_urls[environment].search_api }}"
                export DM_SEARCH_API_ACCESS_TOKEN="$DM_SEARCH_API_TOKEN_{{ environment|upper }}"

                export DM_FRONTEND_DOMAIN="{{ app_urls[environment].www }}"

                export DM_PRODUCTION_SUPPLIER_USER_EMAIL="{{ smoke_test_variables[environment].supplier_email }}"
                export DM_PRODUCTION_SUPPLIER_USER_PASSWORD="{{ smoke_test_variables[environment].supplier_password }}"
                export DM_PRODUCTION_SUPPLIER_USER_SUPPLIER_ID="{{ smoke_test_variables[environment].supplier_id }}"

                export DM_PRODUCTION_BUYER_USER_EMAIL="{{ smoke_test_variables[environment].buyer_email }}"
                export DM_PRODUCTION_BUYER_USER_PASSWORD="{{ smoke_test_variables[environment].buyer_password }}"

                export DM_PRODUCTION_ADMIN_USER_EMAIL="{{ smoke_test_variables[environment].admin_email }}"
                export DM_PRODUCTION_ADMIN_USER_PASSWORD="{{ smoke_test_variables[environment].admin_password }}"

                export DM_PRODUCTION_ADMIN_CCS_CATEGORY_USER_EMAIL="{{ smoke_test_variables[environment].admin_ccs_category_email }}"
                export DM_PRODUCTION_ADMIN_CCS_CATEGORY_USER_PASSWORD="{{ smoke_test_variables[environment].admin_ccs_category_password }}"

                export DM_PRODUCTION_ADMIN_CCS_SOURCING_USER_EMAIL="{{ smoke_test_variables[environment].admin_ccs_sourcing_email }}"
                export DM_PRODUCTION_ADMIN_CCS_SOURCING_USER_PASSWORD="{{ smoke_test_variables[environment].admin_ccs_sourcing_password }}"

                export DM_PRODUCTION_ADMIN_MANAGER_USER_EMAIL="{{ smoke_test_variables[environment].admin_manager_email }}"
                export DM_PRODUCTION_ADMIN_MANAGER_USER_PASSWORD="{{ smoke_test_variables[environment].admin_manager_password }}"

                export DM_PRODUCTION_ADMIN_FRAMEWORK_MANAGER_USER_EMAIL="{{ smoke_test_variables[environment].admin_framework_manager_email }}"
                export DM_PRODUCTION_ADMIN_FRAMEWORK_MANAGER_USER_PASSWORD="{{ smoke_test_variables[environment].admin_framework_manager_password }}"

                export DM_PAGINATION_LIMIT=100

                export DM_ENVIRONMENT={{ environment }}

                make smoke-tests || make rerun
              ''')

              if (currentBuild.rawBuild.getCause(hudson.model.Cause$UpstreamCause) != null) {
                notify_slack(':green_heart:', 'SUCCESS')
              }

            } catch(err) {
              {% if environment == 'production' %}
                notify_slack(':fire:', 'FAILED')
              {% endif %}

              echo "Error caught"
              currentBuild.result = 'FAILURE'
              echo "Error: ${err}"
            } finally {
              publishHTML(target: [
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'reports',
                reportFiles: 'index.html',
                reportName: 'smoke test report'
              ])
            }
          }

        }

{% endfor %}
