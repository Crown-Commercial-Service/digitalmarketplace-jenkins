{% set test_types = {
  "smoke": {
    "name": "smoke",
    "timing": "H/5 * * * *",
    "slugname": "apps-are-up",
    "displayname": "Apps are up",
    "assertion_description": "up and running",
    "slack_username": "smoke-tests",
    "report_name": "smoke test report",
    "make_command": "make smoke-tests || make rerun",
    "stage_name": "Run smoke tests",
  },
  "smoulder": {
    "name": "smoulder",
    "timing": "H * * * *",
    "slugname": "apps-are-working",
    "displayname": "Apps are working",
    "assertion_description": "operating correctly",
    "slack_username": "smoulder-tests",
    "report_name": "smoulder test report",
    "make_command": "make smoulder-tests-parallel && make build-report || ( make build-report; make rerun )",
    "stage_name": "Run smoulder tests",
  }
} %}
{% set environments = (
  ("preview", smoke_test_variables["preview"], test_types["smoke"]),
  ("preview", smoulder_test_variables["preview"], test_types["smoulder"]),
  ("staging", smoke_test_variables["staging"], test_types["smoke"]),
  ("staging", smoulder_test_variables["staging"], test_types["smoulder"]),
  ("production", smoke_test_variables["production"], test_types["smoke"]),
  ("production", smoulder_test_variables["production"], test_types["smoulder"])
) %}
---
{% for environment, vars, test_type in environments %}
- job:
    name: "{{ test_type.slugname }}-{{ environment }}"
    display-name: "{{ test_type.displayname }} - {{ environment }}"
    project-type: pipeline
    description: |
      Check that all Digital Marketplace apps are {{ test_type.assertion_description }} in the {{ environment|upper }} environment
    properties:
      - build-discarder:
          days-to-keep: 30
          num-to-keep: 1000
      - throttle:
          categories:
            - EndToEndTest-{{ environment }}
          option: category
    parameters:
      - string:
          name: FT_BRANCH_NAME
{% if environment == 'preview' or environment == 'staging' %}
          default: "main-no-aws"
{% else %}
          default: "main"
{% endif %}
    triggers:
      - timed: "{{ test_type.timing }}"
    wrappers:
      - ansicolor
    dsl: |

      def notify_slack(icon, status, channel = "#dm-release") {
        build job: "notify-slack",
              parameters: [
                string(name: 'USERNAME', value: '{{ test_type.slack_username }}'),
                string(name: 'ICON', value: icon),
                string(name: 'JOB', value: "{{ test_type.displayname }} - {{ environment }}"),
                string(name: 'CHANNEL', value: channel),
                text(name: 'STAGE', value: "{{ environment }}"),
                text(name: 'STATUS', value: status),
                text(name: 'URL', value: "<${BUILD_URL}{{ test_type.report_name|lower|replace(" ", "_") }}|${BUILD_DISPLAY_NAME}>")
              ]
      }
      currentBuild.displayName = "#${BUILD_NUMBER} - ${FT_BRANCH_NAME}"
      node {
        try {
          stage('Prepare') {
            git url: 'git@github.com:alphagov/digitalmarketplace-functional-tests.git', branch: '${FT_BRANCH_NAME}', credentialsId: 'github_com_and_enterprise'
            sh('gem install bundler --conservative')
          }
          stage('{{ test_type.stage_name }}') {
            sh('''
              set +x # do not echo credentials - remove for debugging

              export DM_API_DOMAIN="{{ app_urls[environment].data_api }}"
              export DM_API_ACCESS_TOKEN="$DM_DATA_API_TOKEN_{{ environment|upper }}"

              export DM_SEARCH_API_DOMAIN="{{ app_urls[environment].search_api }}"
              export DM_SEARCH_API_ACCESS_TOKEN="$DM_SEARCH_API_TOKEN_{{ environment|upper }}"

              export DM_ANTIVIRUS_API_DOMAIN="{{ app_urls[environment].antivirus_api }}"

              export DM_FRONTEND_DOMAIN="{{ app_urls[environment].www }}"

              export DM_ADMIN_FRONTEND_DOMAIN="{{ app_urls[environment].admin_www }}"

              export DM_SUPPLIER_USER_EMAIL="{{ vars.supplier_email }}"
              export DM_SUPPLIER_USER_PASSWORD="{{ vars.supplier_password }}"
              export DM_SUPPLIER_USER_SUPPLIER_ID="{{ vars.supplier_id }}"

              export DM_BUYER_USER_EMAIL="{{ vars.buyer_email }}"
              export DM_BUYER_USER_PASSWORD="{{ vars.buyer_password }}"

              export DM_ADMIN_USER_EMAIL="{{ vars.admin_email }}"
              export DM_ADMIN_USER_PASSWORD="{{ vars.admin_password }}"

              export DM_ADMIN_CCS_CATEGORY_USER_EMAIL="{{ vars.admin_ccs_category_email }}"
              export DM_ADMIN_CCS_CATEGORY_USER_PASSWORD="{{ vars.admin_ccs_category_password }}"

              export DM_ADMIN_CCS_SOURCING_USER_EMAIL="{{ vars.admin_ccs_sourcing_email }}"
              export DM_ADMIN_CCS_SOURCING_USER_PASSWORD="{{ vars.admin_ccs_sourcing_password }}"

              export DM_ADMIN_CCS_DATA_CONTROLLER_USER_EMAIL="{{ vars.admin_ccs_data_controller_email }}"
              export DM_ADMIN_CCS_DATA_CONTROLLER_USER_PASSWORD="{{ vars.admin_ccs_data_controller_password }}"

              export DM_ADMIN_MANAGER_USER_EMAIL="{{ vars.admin_manager_email }}"
              export DM_ADMIN_MANAGER_USER_PASSWORD="{{ vars.admin_manager_password }}"

              export DM_ADMIN_FRAMEWORK_MANAGER_USER_EMAIL="{{ vars.admin_framework_manager_email }}"
              export DM_ADMIN_FRAMEWORK_MANAGER_USER_PASSWORD="{{ vars.admin_framework_manager_password }}"


{% if test_type["name"] == "smoulder" %}
{% if environment == "staging" %}
              export DM_DOCUMENTS_BUCKET_NAME="digitalmarketplace-documents-staging"
{% else %}
              export DM_DOCUMENTS_BUCKET_NAME="digitalmarketplace-documents-{{ environment }}-{{ environment }}"
{% endif %}
              export DM_NOTIFY_API_KEY="$NOTIFY_API_FUNCTIONAL_TESTS_KEY_{{ environment|upper }}"
{% endif %}

              set -x # restore echo

              export DM_PAGINATION_LIMIT=100

              export DM_ENVIRONMENT={{ environment }}

              {{ test_type.make_command }}
            ''')

            if (currentBuild.rawBuild.getCause(hudson.model.Cause$UpstreamCause) != null) {
              notify_slack(':green_heart:', 'SUCCESS')
            }
          }
        } catch(err) {
        {% if environment == 'production' %}
          notify_slack(':fire:', 'FAILED', "#dm-2ndline")
        {% else %}
          try {
            def migrations_being_run = sh(
              script: "curl -s http://{{ jenkins_api_user }}:{{ jenkins_api_user_github_personal_access_token }}@localhost:80/job/clean-and-apply-db-dump-{{ environment }}/lastBuild/api/json?tree=building | jq -r '.building'",
              returnStdout: true
            ).trim()

            if (migrations_being_run == 'false') {
              notify_slack(':fire:', 'FAILED')
            }
          } catch(err2) {
            notify_slack(':fire:', 'FAILED')
          }
        {% endif %}

          echo "Error caught"
          currentBuild.result = 'FAILURE'
          echo "Error: ${err}"
        } finally {
          publishHTML(target: [
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: 'reports',
            reportFiles: 'index.html',
            reportName: '{{ test_type.report_name }}'
          ])
        }
      }


{% endfor %}
